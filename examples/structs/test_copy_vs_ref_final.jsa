external printf(string, ...):void;

struct Point {
    x: i32;
    y: i32;
}

function test_copy(): void {
    printf("=== Test 1: Copy semantics (var a = b) ===\n");
    const p1: Point;
    p1.x = 10;
    p1.y = 20;

    var p2 = p1;  // This creates a COPY
    printf("Before modification: p1.x=%d, p2.x=%d\n", p1.x, p2.x);

    p2.x = 100;  // Modify the copy
    printf("After p2.x=100: p1.x=%d, p2.x=%d\n", p1.x, p2.x);
    printf("Result: p1 is unchanged, p2 is independent copy\n\n");
}

function test_ref_syntax1(): void {
    printf("=== Test 2: Ref semantics (var a: ref Type = b) ===\n");
    const p3: Point;
    p3.x = 5;
    p3.y = 7;

    var p4: ref Point = p3;  // This creates a REFERENCE
    printf("Before modification: p3.x=%d, p4.x=%d\n", p3.x, p4.x);

    p4.x = 50;  // Modify through reference
    printf("After p4.x=50: p3.x=%d, p4.x=%d\n", p3.x, p4.x);
    printf("Result: Both changed because p4 is a reference to p3\n\n");
}

function test_ref_syntax2(): void {
    printf("=== Test 3: Ref semantics (var a = ref b) ===\n");
    const p5: Point;
    p5.x = 99;
    p5.y = 88;

    var p6 = ref p5;  // This creates a REFERENCE
    printf("Before modification: p5.y=%d, p6.y=%d\n", p5.y, p6.y);

    p6.y = 777;  // Modify through reference
    printf("After p6.y=777: p5.y=%d, p6.y=%d\n", p5.y, p6.y);
    printf("Result: Both changed because p6 is a reference to p5\n\n");
}

test_copy();
test_ref_syntax1();
test_ref_syntax2();

printf("All tests passed! Summary:\n");
printf("- 'var a = b' creates an independent copy\n");
printf("- 'var a: ref Type = b' creates a reference\n");
printf("- 'var a = ref b' creates a reference\n");
