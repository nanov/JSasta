external printf(string, ...): void;

var WIDTH = 100;
var GENERATIONS  60;

const ANSI_RESET = "\e[0m";
const ANSI_BLACK = "\e[30m"; // "\033[0;30m";

function applyRule110(left, center, right) {
	var pattern = left * 4 + center * 2 + right;
	var RULE = 110; // 0b01101110
	var res = RULE >> pattern;
	return res & 1;
}

printf("Rule 110 Cellular Automaton\n");
printf("Width: \n" + WIDTH);
printf("Generations: \n" + GENERATIONS);
printf("=\n", WIDTH);

let prevLeft = 0;
let prevCenter = 0;
let prevRight = 0;

let currentRow: i32[150];
let nextRow: i32[150];
var wasHit = true;

for (let i = 0; i < WIDTH; i++) {
	var cell = i == WIDTH - 1 ? 1 : 0;
	currentRow[i] = cell;
	printf(cell == 1 ? ANSI_RESET : ANSI_BLACK);
	printf(cell == 1 ? "*" : "·");
}
printf("%s\n", ANSI_RESET);
var cr = ref currentRow;
var nr = ref nextRow;

for (let gen = 1; gen < GENERATIONS; gen++) {
	for (let i = 0; i < WIDTH; i++) {
		var left = i == 0 ? 0 : cr[i - 1];
		var center = cr[i];
		var right = i == WIDTH - 1 ? 0 : cr[i + 1];
		var nextCell = applyRule110(left, center, right);
		nr[i] = nextCell;
		printf(nextCell == 1 ? ANSI_RESET : ANSI_BLACK);
		printf(nextCell == 1 ? "*" : "·");
	}
	var tr = cr;
	cr = nr;
	nr = tr;
	printf("%s\n", ANSI_RESET);
}
