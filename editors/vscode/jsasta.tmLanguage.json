{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "JSasta",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#storage-types" },
    { "include": "#type-annotations" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#functions" },
    { "include": "#objects" },
    { "include": "#operators" },
    { "include": "#variables" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.jsasta",
          "match": "//.*$"
        },
        {
          "name": "comment.block.jsasta",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.jsasta",
          "match": "\\b(if|else|while|for|return|break|continue)\\b"
        },
        {
          "name": "keyword.other.jsasta",
          "match": "\\b(function|var|let|const)\\b"
        }
      ]
    },
    "storage-types": {
      "patterns": [
        {
          "name": "storage.type.jsasta",
          "match": "\\b(int|double|string|bool|void)\\b"
        }
      ]
    },
    "type-annotations": {
      "patterns": [
        {
          "name": "meta.type.annotation.jsasta",
          "begin": ":\\s*\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": { "name": "punctuation.separator.type.jsasta" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.separator.type.jsasta" }
          },
          "patterns": [
            {
              "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(:)\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
              "captures": {
                "1": { "name": "variable.other.property.jsasta" },
                "2": { "name": "punctuation.separator.type.jsasta" },
                "3": { "name": "storage.type.jsasta" }
              }
            },
            {
              "name": "punctuation.separator.comma.jsasta",
              "match": ","
            }
          ]
        },
        {
          "name": "meta.type.annotation.jsasta",
          "match": ":\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "storage.type.jsasta" }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.jsasta",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.jsasta",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.jsasta",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.jsasta",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.jsasta",
          "match": "\\b([0-9]+\\.?[0-9]*|\\.[0-9]+)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.jsasta",
          "match": "\\b(function)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "storage.type.function.jsasta" },
            "2": { "name": "entity.name.function.jsasta" }
          }
        },
        {
          "name": "meta.function-call.jsasta",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
          "captures": {
            "1": { "name": "entity.name.function.jsasta" }
          }
        }
      ]
    },
    "objects": {
      "patterns": [
        {
          "name": "meta.object-literal.jsasta",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*:",
              "captures": {
                "1": { "name": "variable.other.property.jsasta" }
              }
            },
            { "include": "#strings" },
            { "include": "#numbers" },
            { "include": "#keywords" }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.jsasta",
          "match": "(\\+|\\-|\\*|\\/|%|\\=\\=|\\!\\=|\\<|\\>|\\<\\=|\\>\\=|\\&\\&|\\|\\||\\!|\\=|\\+\\=|\\-\\=|\\*\\=|\\/\\=|\\+\\+|\\-\\-|\\.|\\[|\\])"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.jsasta",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  },
  "scopeName": "source.jsasta"
}
